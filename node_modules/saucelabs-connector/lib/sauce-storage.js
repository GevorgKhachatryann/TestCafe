"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.default = void 0;

var _got = _interopRequireDefault(require("got"));

var _fs = _interopRequireDefault(require("fs"));

var _sauceHost = require("./sauce-host");

var _messages = require("./messages");

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

const fsPromises = _fs.default.promises;

class SauceStorage {
  constructor(user, pass) {
    this.user = user;
    this.pass = pass;
  }

  _request(params) {
    return (0, _got.default)(params).then(response => {
      if (response.statusCode !== 200) {
        throw new Error((0, _messages.getText)(_messages.MESSAGE.unexpectedSauceApiResponse, {
          method: params.method,
          url: params.url,
          statusCode: response.statusCode,
          body: JSON.stringify(response.body)
        }));
      }

      return response.body;
    }).catch(err => {
      throw new Error((0, _messages.getText)(_messages.MESSAGE.failedToCallSauceApi, {
        err
      }));
    });
  }

  async isFileAvailable(fileName) {
    const params = {
      method: 'GET',
      url: `https://${_sauceHost.SAUCE_API_HOST}/rest/v1/storage/${this.user}`,
      headers: {
        'Content-Type': 'application/json'
      },
      username: this.user,
      password: this.pass
    };
    const body = await this._request(params);
    const files = JSON.parse(body).files;
    const result = files.filter(file => file.name === fileName);
    return result.length > 0;
  }

  async uploadFile(filePath, fileName) {
    const buffer = await fsPromises.readFile(`${filePath}${fileName}`).catch(err => {
      throw new Error((0, _messages.getText)(_messages.MESSAGE.failedToReadIePrerunBat, {
        filePath,
        fileName,
        err
      }));
    });
    const params = {
      method: 'POST',
      url: `https://${_sauceHost.SAUCE_API_HOST}/rest/v1/storage/${this.user}/${fileName}?overwrite=true`,
      headers: {
        'Content-Type': 'application/octet-stream'
      },
      username: this.user,
      password: this.pass,
      body: buffer.toString('binary', 0, buffer.length)
    };
    await this._request(params);
  }

}

exports.default = SauceStorage;